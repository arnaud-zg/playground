{"version":3,"sources":["webpack:///../src/animations/TransitionDocumentTransitionAPI.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","href","target","__position","__code","__scope","Playground","Props","NoPageTransition","PageTransitionCSS","PageTransitionDOM","PageTransitionFadeInFadeOut","PageTransitionStatus","PageTransitionTranslate","isMDXComponent"],"mappings":"8SAUaA,EAAe,Q,0PAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,gBAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,qBADR,qBAGA,kBACE,GAAM,gBADR,gBAGA,+VAKA,+WAKA,sBACE,kBAAIC,WAAW,MACb,iBAAGC,KAAK,8CAA8CC,OAAO,UAA7D,2DAEF,kBAAIF,WAAW,MACb,iBAAGC,KAAK,qDAAqDC,OAAO,UAApE,2DAGJ,kBACE,GAAM,qBADR,qBAGA,+KAEF,sBAAQF,WAAW,KAAnB,uCAFE,KAGA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,2BAA4BC,SAAO,GACpEP,QACAH,kBACAW,eACAC,UACAC,qBACAC,sBACAC,sBACAC,gCACAC,yBACAC,6BAVoE,gBAWpElB,IAXoE,EAYpEH,eAZoE,GAanEO,QAAQ,cACb,YAAC,IAAD,CAAsBA,QAAQ,0BAE5B,kBACE,GAAM,iBADR,iBAGA,8DACA,YAAC,IAAD,CAAYI,WAAY,EAAGC,OAAQ,uBAAwBC,SAAO,GAChEP,QACAH,kBACAW,eACAC,UACAC,qBACAC,sBACAC,sBACAC,gCACAC,yBACAC,6BAVgE,gBAWhElB,IAXgE,EAYhEH,eAZgE,GAa/DO,QAAQ,cACb,YAAC,IAAD,CAAkBA,QAAQ,sBAExB,kBACE,GAAM,qBADR,sBAGA,2OAGF,0BAAYC,WAAW,KAAvB,cAHE,OAG4D,0BAAYA,WAAW,KAAvB,cAH5D,kDAIF,0BAAYA,WAAW,KAAvB,cAJE,OAI4D,0BAAYA,WAAW,KAAvB,cAJ5D,4BAKA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,kCAAmCC,SAAO,GAC3EP,QACAH,kBACAW,eACAC,UACAC,qBACAC,sBACAC,sBACAC,gCACAC,yBACAC,6BAV2E,gBAW3ElB,IAX2E,EAY3EH,eAZ2E,GAa1EO,QAAQ,cACb,YAAC,IAAD,CAA6BA,QAAQ,iCAEnC,kBACE,GAAM,2CADR,2CAGA,4PAGA,uBAAK,oBAAMC,WAAW,OAAjB,+JAKL,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,8BAA+BC,SAAO,GACvEP,QACAH,kBACAW,eACAC,UACAC,qBACAC,sBACAC,sBACAC,gCACAC,yBACAC,6BAVuE,gBAWvElB,IAXuE,EAYvEH,eAZuE,GAatEO,QAAQ,cACb,YAAC,IAAD,CAAyBA,QAAQ,6BAE/B,kBACE,GAAM,kCADR,kCAGA,mLAEF,0BAAYC,WAAW,KAAvB,uBAFE,oKAKA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,wBAAyBC,SAAO,GACjEP,QACAH,kBACAW,eACAC,UACAC,qBACAC,sBACAC,sBACAC,gCACAC,yBACAC,6BAViE,gBAWjElB,IAXiE,EAYjEH,eAZiE,GAahEO,QAAQ,cACb,YAAC,IAAD,CAAmBA,QAAQ,uBAEzB,kBACE,GAAM,oCADR,oCAGA,4GACK,0BAAYC,WAAW,KAAvB,mCADL,qBAEA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,wBAAyBC,SAAO,GACjEP,QACAH,kBACAW,eACAC,UACAC,qBACAC,sBACAC,sBACAC,gCACAC,yBACAC,6BAViE,gBAWjElB,IAXiE,EAYjEH,eAZiE,GAahEO,QAAQ,cACb,YAAC,IAAD,CAAmBA,QAAQ,6B,wPAM7BH,EAAWkB,gBAAiB","file":"component---src-animations-transition-document-transition-api-mdx-2a62f92edae6336ad284.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/playground/playground/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from \"docz\";\nimport { NoPageTransition, PageTransitionCSS, PageTransitionDOM, PageTransitionFadeInFadeOut, PageTransitionStatus, PageTransitionTranslate } from \"./DocumentTransitionAPI/index\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usepagetransition\"\n    }}>{`usePageTransition`}</h1>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`Following the presentation of Jake Archibald on the Google I/O 2022, I was\nreally excited to document transition API. Unlike mobile application\ndevelopment, creating a nice transition from one page to another implies to\nuse an external library such as framer or have a in-depth knowledge about css\nanimation and keyframes.`}</p>\n    <p>{`From what I have experimented, document transition API provides modularity on\nthe code. This means the animations are added to an application as a plugin and\ncan be easily removed at any time. Moreove, it is very easy to use and have a\nfade or zoom animation. And the icing on the cake, it's customizable with css\nanimation and keyframes.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <a href=\"https://www.youtube.com/watch?v=JCJUPJ_zDQ4\" target=\"_blank\">Video: Google I/O Bringing page transitions to the web</a>\n      </li>\n      <li parentName=\"ul\">\n        <a href=\"https://github.com/WICG/shared-element-transitions\" target=\"_blank\">Source: Web Incubator CG / Shared Element Transitions</a>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"transition-status\"\n    }}>{`Transition Status`}</h2>\n    <p>{`Given that the page transition API is still in the experimental phase, to get\nstarted with element transitions today, you need to enable the API via\n`}<strong parentName=\"p\">{`chrome://flags/#document-transition`}</strong>{`.`}</p>\n    <Playground __position={0} __code={'<PageTransitionStatus />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NoPageTransition,\n      PageTransitionCSS,\n      PageTransitionDOM,\n      PageTransitionFadeInFadeOut,\n      PageTransitionStatus,\n      PageTransitionTranslate,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <PageTransitionStatus mdxType=\"PageTransitionStatus\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"no-transition\"\n    }}>{`No Transition`}</h2>\n    <p>{`No transition on this list of images.`}</p>\n    <Playground __position={1} __code={'<NoPageTransition />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NoPageTransition,\n      PageTransitionCSS,\n      PageTransitionDOM,\n      PageTransitionFadeInFadeOut,\n      PageTransitionStatus,\n      PageTransitionTranslate,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <NoPageTransition mdxType=\"NoPageTransition\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"fade-in--fade-out\"\n    }}>{`Fade In / Fade Out`}</h2>\n    <p>{`The default transition is a cross-fade from the image list to the selected\nimage. The transition is made based on the \"screenshot\" made on the outgoing and\nincoming pages. The outgoing elements animates from\n`}<inlineCode parentName=\"p\">{`opacity: 1`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`opacity: 0`}</inlineCode>{`, whereas the incoming elements animates from\n`}<inlineCode parentName=\"p\">{`opacity: 0`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`opacity: 1`}</inlineCode>{`, creating a cross-fade.`}</p>\n    <Playground __position={2} __code={'<PageTransitionFadeInFadeOut />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NoPageTransition,\n      PageTransitionCSS,\n      PageTransitionDOM,\n      PageTransitionFadeInFadeOut,\n      PageTransitionStatus,\n      PageTransitionTranslate,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <PageTransitionFadeInFadeOut mdxType=\"PageTransitionFadeInFadeOut\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"translate-with-pseudo-element-selectors\"\n    }}>{`Translate with pseudo-element selectors`}</h2>\n    <p>{`If you want to go further and use custom transition. Each element could be\ntargeted using CSS pseudo selectors, it means that all the animation are driven\nby CSS. Here are the pseudo selectors provided by Page Transition API.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`::page-transition-container(root)\n::page-transition-image-wrapper(root)\n::page-transition-outgoing-image(root)\n::page-transition-incoming-image(root)\n`}</code></pre>\n    <Playground __position={3} __code={'<PageTransitionTranslate />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NoPageTransition,\n      PageTransitionCSS,\n      PageTransitionDOM,\n      PageTransitionFadeInFadeOut,\n      PageTransitionStatus,\n      PageTransitionTranslate,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <PageTransitionTranslate mdxType=\"PageTransitionTranslate\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"transition-with-css-properties\"\n    }}>{`Transition with CSS properties`}</h2>\n    <p>{`So far, we've been able to animate the whole page, but state transitions\noften need to animate things independently. To do this you can use the property\n`}<inlineCode parentName=\"p\">{`page-transition-tag`}</inlineCode>{`. On the same principle, the transition is made based on\nthe \"screenshot\" made on the outgoing and inconming element. You can see a\ntranslate and zoom effect.`}</p>\n    <Playground __position={4} __code={'<PageTransitionCSS />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NoPageTransition,\n      PageTransitionCSS,\n      PageTransitionDOM,\n      PageTransitionFadeInFadeOut,\n      PageTransitionStatus,\n      PageTransitionTranslate,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <PageTransitionCSS mdxType=\"PageTransitionCSS\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"transition-with-dom-manipulation\"\n    }}>{`Transition with DOM manipulation`}</h2>\n    <p>{`Another way to animate things independently is to dynamically set the value\non the `}<inlineCode parentName=\"p\">{`element.style.pageTransitionTag`}</inlineCode>{` with Javascript.`}</p>\n    <Playground __position={5} __code={'<PageTransitionDOM />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NoPageTransition,\n      PageTransitionCSS,\n      PageTransitionDOM,\n      PageTransitionFadeInFadeOut,\n      PageTransitionStatus,\n      PageTransitionTranslate,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <PageTransitionDOM mdxType=\"PageTransitionDOM\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}